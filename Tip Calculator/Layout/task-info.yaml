type: edu
files:
- name: src/main/java/org/hyperskill/calculator/tip/MainActivity.kt
  visible: true
  text: |-
    package org.hyperskill.calculator.tip

    import android.os.Bundle
    import androidx.appcompat.app.AppCompatActivity

    class MainActivity : AppCompatActivity() {
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
        }
    }
  learner_created: false
- name: src/main/res/drawable/ic_launcher_background.xml
  visible: true
  learner_created: false
- name: src/main/res/drawable-v24/ic_launcher_foreground.xml
  visible: true
  learner_created: false
- name: src/main/res/layout/activity_main.xml
  visible: true
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
  visible: true
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
  visible: true
  learner_created: false
- name: src/main/res/values/colors.xml
  visible: true
  learner_created: false
- name: src/main/res/values/strings.xml
  visible: true
  learner_created: false
- name: src/main/res/values/styles.xml
  visible: true
  learner_created: false
- name: src/main/AndroidManifest.xml
  visible: true
  learner_created: false
- name: src/test/java/org/hyperskill/calculator/tip/internals/AbstractUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.calculator.tip.internals

    import android.app.Activity
    import android.app.AlertDialog
    import android.content.Intent
    import android.os.Bundle
    import android.view.View
    import org.junit.Assert.*
    import org.robolectric.Robolectric
    import org.robolectric.Shadows.shadowOf
    import org.robolectric.android.controller.ActivityController
    import org.robolectric.shadow.api.Shadow
    import org.robolectric.shadows.ShadowActivity
    import org.robolectric.shadows.ShadowAlertDialog
    import org.robolectric.shadows.ShadowLooper
    import org.robolectric.shadows.ShadowToast
    import java.time.Duration

    abstract class AbstractUnitTest<T : Activity>(clazz: Class<T>) {

        /**
         * Setup and control activities and their lifecycle
         */
        val activityController: ActivityController<T> by lazy {
            Robolectric.buildActivity(clazz)
        }

        /**
         * The activity being tested.
         *
         * It is the @RealObject of the shadowActivity
         */
        val activity : Activity by lazy {
            activityController.get()
        }

        /**
         * A Roboletric shadow object of the Activity class, contains helper methods to deal with
         * testing activities like setting permissions, peeking results of launched activities for result,
         * retrieving shown dialogs, intents and others.
         *
         * If you don't know what shadows are you can have a better understanding on that reading this
         * on roboletric documentation: http://robolectric.org/extending/
         *
         * Understanding Shadows is fundamental for Roboletric, things are not what they appear to be on
         * Roboletric because running a code on the jvm is not the same as running the code on a real/emulated device.
         * Code that expects to eventually talk to the machine won't have the machine they expect to have to talk to.
         * Shadow is how Roboletric makes things possible, they impersonate @RealObject and act when @RealObject is expected to act.
         *
         * Things in Roboletric are not what they appear to be.
         * It is possible to not notice it for the most part, but it will be essential for some other parts
         */
        val shadowActivity: ShadowActivity by lazy {
            Shadow.extract(activity)
        }

        /**
         * A Roboletric shadow object of the mainLooper. Handles enqueued runnables and also the passage of time.
         *
         * Usually used with .idleFor(someDurationValue) or .runToEndOfTasks()
         */
        val shadowLooper: ShadowLooper by lazy {
            shadowOf(activity.mainLooper)
        }

        /**
         * Decorate your test code with this method to ensure better error messages displayed
         * when tests are run with check button and exceptions are thrown by user implementation.
         *
         * returns a value for convenience use, like in tests that involve navigation between Activities
         */
        fun <ReturnValue> testActivity(arguments: Intent = Intent(), savedInstanceState: Bundle = Bundle(), testCodeBlock: (Activity) -> ReturnValue): ReturnValue {
            try {
                activity.intent =  arguments
                activityController.setup(savedInstanceState)
            } catch (ex: Exception) {
                throw AssertionError("Exception, test failed on activity creation with $ex\n${ex.stackTraceToString()}")
            }

            return try {
                testCodeBlock(activity)
            } catch (ex: Exception) {
                throw AssertionError("Exception. Test failed on activity execution with $ex\n${ex.stackTraceToString()}")
            }
        }

        /**
         * Use this method to find views.
         *
         * The view existence will be assert before being returned
         */
        inline fun <reified T> Activity.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", this.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            assertNotNull(idNotFoundMessage, view)
            assertTrue(wrongClassMessage, view is T)

            return view as T
        }

        /**
         * Use this method to find views.
         *
         * The view existence will be assert before being returned
         */
        inline fun <reified T> View.findViewByString(idString: String): T {
            val id = this.resources.getIdentifier(idString, "id", context.packageName)
            val view: View? = this.findViewById(id)

            val idNotFoundMessage = "View with id \"$idString\" was not found"
            val wrongClassMessage = "View with id \"$idString\" is not from expected class. " +
                    "Expected ${T::class.java.simpleName} found ${view?.javaClass?.simpleName}"

            assertNotNull(idNotFoundMessage, view)
            assertTrue(wrongClassMessage, view is T)

            return view as T
        }

        /**
         * Use this method to perform clicks. It will also advance the clock millis milliseconds and run
         * enqueued Runnable scheduled to run on main looper in that timeframe.
         * Default value for millis is 500
         *
         * Internally it calls performClick() and shadowLooper.idleFor(millis)
         */
        fun View.clickAndRun(millis: Long = 500){
            this.performClick()
            shadowLooper.idleFor(Duration.ofMillis(millis))
        }

        /**
         * Asserts that the last message toasted is the expectedMessage.
         * Assertion fails if no toast is shown with null actualLastMessage value.
         */
        fun assertLastToastMessageEquals(errorMessage: String, expectedMessage: String,) {
            val actualLastMessage: String? = ShadowToast.getTextOfLatestToast()
            assertEquals(errorMessage, expectedMessage, actualLastMessage)
        }

        /**
         * Use this method to retrieve the latest AlertDialog.
         *
         * The existence of such AlertDialog will be asserted before returning.
         *
         * Robolectric only supports android.app.AlertDialog, test will not be
         * able to find androidx.appcompat.app.AlertDialog.
         *
         * - Important!!! :
         * When writing stage description state explicitly the correct version that should be imported
         */
        fun getLatestDialog(): AlertDialog {
            val latestAlertDialog = ShadowAlertDialog.getLatestAlertDialog()

            assertNotNull(
                "There was no AlertDialog found. Make sure to import android.app.AlertDialog version",
                latestAlertDialog
            )

            return latestAlertDialog!!
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/calculator/tip/internals/TipCalculatorUnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.calculator.tip.internals

    import android.app.Activity
    import android.text.InputType
    import android.widget.EditText
    import android.widget.TextView
    import com.google.android.material.slider.Slider
    import org.junit.Assert.assertEquals
    import java.util.concurrent.TimeUnit

    open class TipCalculatorUnitTest<T : Activity>(clazz: Class<T>) : AbstractUnitTest<T>(clazz) {
        companion object {
            const val idEditText = "edit_text"
            const val idTextView = "text_view"
            const val idSlider = "slider"
        }


        val editText by lazy  {
            activity.findViewByString<EditText>(idEditText).apply {
                val messageInputTypeError = "View \"$idEditText\" should have inputType number"
                val expectedInputType = InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_FLAG_DECIMAL
                val actualInputType = inputType
                assertEquals(messageInputTypeError, expectedInputType, actualInputType)
            }
        }
        val textView by lazy  {
            activity.findViewByString<TextView>(idTextView).apply {
                val messageInitialTextError = "View \"$idTextView\" should initially have empty text"
                val expectedInitialText = ""
                val actualInitialText = text.toString()
                assertEquals(messageInitialTextError, expectedInitialText, actualInitialText)
            }
        }

        val slider by lazy  {
            activity.findViewByString<Slider>(idSlider).apply {
                assertSliderInitialValues(
                    idString = idSlider,
                    expectedStepSize = 1.0f,
                    expectedValueFrom = 0.0f,
                    expectedValueTo = 100.0f,
                    expectedValue = 0f
                )
            }
        }

        private fun Slider.assertSliderInitialValues(
            idString: String,
            expectedStepSize: Float,
            expectedValueFrom: Float,
            expectedValueTo: Float,
            expectedValue: Float
        ){
            val messageStepSizeError = "View \"$idString\" should have proper stepSize attribute"
            val actualStepSize = stepSize
            assertEquals(messageStepSizeError, expectedStepSize, actualStepSize)

            val messageValueFromError = "View \"$idString\" should have proper valueFrom attribute"
            val actualValueFrom = valueFrom
            assertEquals(messageValueFromError, expectedValueFrom, actualValueFrom)

            val messageValueToError = "View \"$idString\" should have proper valueTo attribute"
            val actualValueTo = valueTo
            assertEquals(messageValueToError, expectedValueTo, actualValueTo)

            val messageValueError = "View \"$idString\" should have proper initial value"
            val actualValue = value
            assertEquals(messageValueError, expectedValue, actualValue)
        }

        protected fun advanceClockAndRun(millis: Long = 500) {
            shadowLooper.idleFor(millis, TimeUnit.MILLISECONDS)
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/calculator/tip/Stage1UnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.calculator.tip

    import org.hyperskill.calculator.tip.internals.TipCalculatorUnitTest
    import org.junit.FixMethodOrder
    import org.junit.Test
    import org.junit.runner.RunWith
    import org.junit.runners.MethodSorters
    import org.robolectric.RobolectricTestRunner

    // Version 2.0
    @RunWith(RobolectricTestRunner::class)
    @FixMethodOrder(MethodSorters.NAME_ASCENDING)
    class Stage1UnitTest : TipCalculatorUnitTest<MainActivity>(MainActivity::class.java) {

        @Test
        fun test00_checkEditText() {
             testActivity {
                editText
            }
        }

        @Test
        fun test01_checkSlider() {
            testActivity {
                slider
            }
        }

        @Test
        fun test02_checkTextView() {
            testActivity {
                textView
            }
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'

    android {
        compileSdkVersion hs.android.compileSdkVersion

        defaultConfig {

            applicationId "org.hyperskill.calculator.tip"
            minSdkVersion hs.android.minSdkVersion
            targetSdkVersion hs.android.targetSdkVersion
            versionCode 1
            versionName '1.0'
        }

        buildFeatures {
            viewBinding true
        }
    }

    dependencies {
        def kotlinVersion = hs.android.kotlinVersion
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        def coreKtx = hs.android.lib.coreKtx
        implementation "androidx.core:core-ktx:$coreKtx"

        def appCompat = hs.android.lib.appCompat
        implementation "androidx.appcompat:appcompat:$appCompat"

        def constraintLayout = hs.android.lib.constraintLayout
        implementation "androidx.constraintlayout:constraintlayout:$constraintLayout"

        def material = hs.android.lib.material
        implementation "com.google.android.material:material:$material"
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/12245#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 26 Mar 2023 16:20:20 UTC"
record: 1
